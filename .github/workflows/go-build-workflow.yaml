# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

on:
  workflow_call:
    inputs:
        TESTCOVERAGE_THRESHOLD:
          type: number
          required: false
          default: 90
        GOLANG_VERSION:
          type: number
          required: false
          default: 1.19
        LICENSE_EXISTS_CHECK:
          type: boolean
          required: false
          default: true

jobs:

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Setup Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ inputs.GOLANG_VERSION }}

    - name: Install Dependencies
      run: |
            go version
            go install golang.org/x/lint/golint@latest

    - uses: actions/checkout@v3

    - name:  Quality Gate - Lint Check
      run: |
        golint -set_exit_status ./...

  vet:
    name: Vet
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ inputs.GOLANG_VERSION }}

    - name: Quality Gate - Vet Check
      run: |
        go vet ./...


  staticcheck:
    name: Static Check
    runs-on: ubuntu-latest
    steps:
    - name: Setup Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ inputs.GOLANG_VERSION }}

    - name: Install Dependencies
      run: |
        go version
        go install honnef.co/go/tools/cmd/staticcheck@latest

    - uses: actions/checkout@v3

    - name:  Quality Gate - Static Check
      run: |
        staticcheck ./...

  dependencyVulnterabilityCheck:
    name: Dependency Vulnerability Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ inputs.GOLANG_VERSION }}
        
    - name: WriteGoList
      run: go list -json -m all > go.list

    - name: Quality Gate - Dependency Vulnerability Check with Nancy
      uses: sonatype-nexus-community/nancy-github-action@main

  licenseExists:
    name: License File Existance
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Quality Gate - Check Existence of LICENSE file
      run: |
        if test -f "LICENSE"; then
          echo "$FILE exists."
        else 
          echo "$FILE does NOT exists."
          exit 1
        fi

  licenseChecker:
    name: Check Dependency Licenses against approved list
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ inputs.GOLANG_VERSION }}

    - name: Install Dependencies
      run: |
        go version
        go install github.com/google/go-licenses@latest

    - name: Quality Gate - Check Dependency Licenses against approved list
      run: |
        go mod download
        go-licenses check ./... --disallowed_types=forbidden > depedentlicense.out 2>error.out
        echo "dependent license check output"
        cat depedentlicense.out
        echo "end -dependent license check output"
        if [ -s depedentlicense.out ]; then
          echo "Dependent License issue found"
          exit 1
        else
          echo "No Dependent License against approved list"
        fi

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: 
      - vet
      - lint
      - staticcheck
      - dependencyVulnterabilityCheck
      - licenseExists
      - licenseChecker
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ inputs.GOLANG_VERSION }}

    - name: Build
      run: go build -v ./...

  unittest:
    name: Unit Test
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ inputs.GOLANG_VERSION }}

    - name: Quality Gate - Unit Test
      run: |
            go test ./... -coverprofile coverage.out -covermode count
            go tool cover -func coverage.out

    - name: Quality Gate - Test Coverage Check
      env:
          TESTCOVERAGE_THRESHOLD: ${{ inputs.TESTCOVERAGE_THRESHOLD }}
      run: |
            echo "Quality Gate: checking test coverage is above threshold ..."
            echo "Threshold             : $TESTCOVERAGE_THRESHOLD %"
            totalCoverage=`go tool cover -func=coverage.out | grep total | grep -Eo '[0-9]+\.[0-9]+'`
            echo "Current test coverage : $totalCoverage %"
            if (( $(echo "$totalCoverage $TESTCOVERAGE_THRESHOLD" | awk '{print ($1 >= $2)}') )); then
                echo "OK"
            else
                echo "Current test coverage is below threshold. Please add more unit tests or adjust threshold to a lower value."
                echo "Failed"
                exit 1
            fi

    - name: Upload Go test results
      uses: actions/upload-artifact@v3
      with:
        name: Unit-Test-Results
        path: coverage.out
